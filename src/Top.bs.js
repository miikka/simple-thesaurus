// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

var component = ReasonReact.reducerComponent("Top");

function make() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (param) {
              var send = param[/* send */3];
              fetch("/data/mthesaur.txt").then((function (prim) {
                        return prim.text();
                      })).then((function (text) {
                      var lines = text.split("\n");
                      var words = $$Array.map((function (line) {
                              return line.split(",");
                            }), lines);
                      var dict = { };
                      $$Array.iter((function (word_line) {
                              var head = Caml_array.caml_array_get(word_line, 0);
                              var tail = $$Array.sub(word_line, 1, word_line.length - 1 | 0);
                              dict[head] = tail;
                              return /* () */0;
                            }), words);
                      return Promise.resolve(Curry._1(send, /* DataLoaded */Block.__(0, [dict])));
                    }));
              return /* () */0;
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              var send = param[/* send */3];
              var state = param[/* state */1];
              var match = state[/* thesaurus */0];
              if (match !== undefined) {
                var words = Js_primitive.valFromOption(match)[state[/* query */1]];
                return React.createElement("div", undefined, React.createElement("input", {
                                autoFocus: true,
                                placeholder: "gimme da gorbage",
                                value: state[/* query */1],
                                onChange: (function ($$event) {
                                    return Curry._1(send, /* ChangeQuery */Block.__(1, [$$event.target.value]));
                                  })
                              }), words !== undefined ? words.join(", ") : "No synonyms found.");
              } else {
                return React.createElement("div", undefined, "Loading...");
              }
            }),
          /* initialState */(function () {
              return /* record */[
                      /* thesaurus */undefined,
                      /* query */""
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (action.tag) {
                return /* Update */Block.__(0, [/* record */[
                            /* thesaurus */state[/* thesaurus */0],
                            /* query */action[0]
                          ]]);
              } else {
                return /* Update */Block.__(0, [/* record */[
                            /* thesaurus */Js_primitive.some(action[0]),
                            /* query */state[/* query */1]
                          ]]);
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.make = make;
/* component Not a pure module */
